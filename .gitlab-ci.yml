# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: python:3.9

stages:
  - build
  - test
  - release
  - deploy

build-job:
  tags:
    - vm-shell
  stage: build
  script:
    - echo "creating virtual environment for the project..."
    - virtualenv $(pwd)/venv
    - source $(pwd)/venv/bin/activate
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    - deactivate
  artifacts:
    paths:
      - $(pwd)/venv

test-job:
  tags:
    - vm-shell
  stage: test
  script:
    - echo "Activating virtual environment..."
    - source $(pwd)/venv/bin/activate
    - echo "Running unit tests..."
    - python manage.py test budget
    - echo "Checking the server..."
    - python manage.py runserver &
    - sleep 10
    - curl -sSf http://localhost:8000 > /dev/null && echo "Server is Up"
    - sudo pkill python
    - deactivate
    - echo "All tests successfully passed."

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID

release-job:
  tags:
    - vm-shell
  stage: release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  after_script:
    - docker logout

# Deploy petclinic
deploy-job:
  tags:
    - vm-shell
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY proxmox@192.168.0.137 "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker run -d -p 5000:8000 $CONTAINER_IMAGE"

